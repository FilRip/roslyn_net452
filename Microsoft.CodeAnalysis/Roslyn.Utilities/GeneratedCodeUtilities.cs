using System;
using System.Collections.Immutable;
using System.Threading;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;

#nullable enable

namespace Roslyn.Utilities
{
    public static class GeneratedCodeUtilities
    {
        private static readonly string[] s_autoGeneratedStrings = new string[2] { "<autogenerated", "<auto-generated" };

        public static bool IsGeneratedSymbolWithGeneratedCodeAttribute(ISymbol symbol, INamedTypeSymbol generatedCodeAttribute)
        {
            if (symbol.Kind != SymbolKind.Namespace)
            {
                if (symbol.DeclaringSyntaxReferences.Length > 1)
                {
                    return false;
                }
                ImmutableArray<AttributeData>.Enumerator enumerator = symbol.GetAttributes().GetEnumerator();
                while (enumerator.MoveNext())
                {
                    AttributeData current = enumerator.Current;
                    if (generatedCodeAttribute.Equals(current.AttributeClass))
                    {
                        return true;
                    }
                }
            }
            if (symbol.ContainingSymbol != null)
            {
                return IsGeneratedSymbolWithGeneratedCodeAttribute(symbol.ContainingSymbol, generatedCodeAttribute);
            }
            return false;
        }

        public static bool IsGeneratedCode(SyntaxTree tree, Func<SyntaxTrivia, bool> isComment, CancellationToken cancellationToken)
        {
            if (!IsGeneratedCodeFile(tree.FilePath))
            {
                return BeginsWithAutoGeneratedComment(tree, isComment, cancellationToken);
            }
            return true;
        }

        public static bool IsGeneratedCode(string? filePath, SyntaxNode root, Func<SyntaxTrivia, bool> isComment)
        {
            if (!IsGeneratedCodeFile(filePath))
            {
                return BeginsWithAutoGeneratedComment(root, isComment);
            }
            return true;
        }

        private static bool IsGeneratedCodeFile([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? filePath)
        {
            if (!RoslynString.IsNullOrEmpty(filePath))
            {
                string fileName = PathUtilities.GetFileName(filePath);
                if (fileName.StartsWith("TemporaryGeneratedFile_", StringComparison.OrdinalIgnoreCase))
                {
                    return true;
                }
                if (!string.IsNullOrEmpty(PathUtilities.GetExtension(fileName)))
                {
                    string fileName2 = PathUtilities.GetFileName(filePath, includeExtension: false);
                    if (fileName2.EndsWith(".designer", StringComparison.OrdinalIgnoreCase) || fileName2.EndsWith(".generated", StringComparison.OrdinalIgnoreCase) || fileName2.EndsWith(".g", StringComparison.OrdinalIgnoreCase) || fileName2.EndsWith(".g.i", StringComparison.OrdinalIgnoreCase))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private static bool BeginsWithAutoGeneratedComment(SyntaxNode root, Func<SyntaxTrivia, bool> isComment)
        {
            if (root.HasLeadingTrivia)
            {
                SyntaxTriviaList.Enumerator enumerator = root.GetLeadingTrivia().GetEnumerator();
                while (enumerator.MoveNext())
                {
                    SyntaxTrivia current = enumerator.Current;
                    if (!isComment(current))
                    {
                        continue;
                    }
                    string text = current.ToString();
                    string[] array = s_autoGeneratedStrings;
                    foreach (string value in array)
                    {
                        if (text.Contains(value))
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private static bool BeginsWithAutoGeneratedComment(SyntaxTree tree, Func<SyntaxTrivia, bool> isComment, CancellationToken cancellationToken)
        {
            SyntaxNode root = tree.GetRoot(cancellationToken);
            if (root.HasLeadingTrivia)
            {
                SyntaxTriviaList.Enumerator enumerator = root.GetLeadingTrivia().GetEnumerator();
                while (enumerator.MoveNext())
                {
                    SyntaxTrivia current = enumerator.Current;
                    if (!isComment(current))
                    {
                        continue;
                    }
                    string text = current.ToString();
                    string[] array = s_autoGeneratedStrings;
                    foreach (string value in array)
                    {
                        if (text.Contains(value))
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public static GeneratedKind GetIsGeneratedCodeFromOptions(ImmutableDictionary<string, string> options)
        {
            if (options.TryGetValue("generated_code", out var value) && bool.TryParse(value, out var result))
            {
                if (!result)
                {
                    return GeneratedKind.NotGenerated;
                }
                return GeneratedKind.MarkedGenerated;
            }
            return GeneratedKind.Unknown;
        }

        public static bool? GetIsGeneratedCodeFromOptions(AnalyzerConfigOptions options)
        {
            if (options.TryGetValue("generated_code", out var value) && bool.TryParse(value, out var result))
            {
                return result;
            }
            return null;
        }
    }
}
