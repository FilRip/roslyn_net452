using Microsoft.VisualBasic.CompilerServices;
using Roslyn.Utilities;

namespace Microsoft.CodeAnalysis.VisualBasic.Syntax.InternalSyntax
{
	[StandardModule]
	internal sealed class OperatorResolution
	{
		private enum TableKind
		{
			Addition,
			SubtractionMultiplicationModulo,
			Division,
			Power,
			IntegerDivision,
			Shift,
			Logical,
			Bitwise,
			Relational,
			ConcatenationLike
		}

		private static readonly byte[,,] s_table;

		private static int TypeCodeToIndex(SpecialType specialType)
		{
			return specialType switch
			{
				SpecialType.None => 0, 
				SpecialType.System_Boolean => 1, 
				SpecialType.System_SByte => 2, 
				SpecialType.System_Byte => 3, 
				SpecialType.System_Int16 => 4, 
				SpecialType.System_UInt16 => 5, 
				SpecialType.System_Int32 => 6, 
				SpecialType.System_UInt32 => 7, 
				SpecialType.System_Int64 => 8, 
				SpecialType.System_UInt64 => 9, 
				SpecialType.System_Decimal => 10, 
				SpecialType.System_Single => 11, 
				SpecialType.System_Double => 12, 
				SpecialType.System_DateTime => 13, 
				SpecialType.System_Char => 14, 
				SpecialType.System_String => 15, 
				SpecialType.System_Object => 16, 
				_ => throw ExceptionUtilities.UnexpectedValue(specialType), 
			};
		}

		static OperatorResolution()
		{
			s_table = new byte[10, 17, 17]
			{
				{
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 11, 9, 11, 11, 13, 13, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 9, 9, 11, 11, 13, 13, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 11, 11, 10, 11, 12, 13, 14, 15, 16,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 11, 11, 11, 11, 13, 13, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 13, 13, 12, 13, 12, 13, 14, 15, 16,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 13, 13, 13, 13, 13, 13, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 15, 15, 14, 15, 14, 15, 14, 15, 16,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 17, 17, 16, 17, 16, 17, 16, 17, 16,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 17, 17, 17, 17, 17, 17, 17, 17, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 18, 18, 18, 18, 18, 18, 18, 18, 18,
						18, 18, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 20, 0, 20, 1
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 20, 20, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 20, 20, 20, 1
					},
					{
						0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 1, 1, 1, 1, 1, 1
					}
				},
				{
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 11, 9, 11, 11, 13, 13, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 9, 9, 11, 11, 13, 13, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 11, 11, 10, 11, 12, 13, 14, 15, 16,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 11, 11, 11, 11, 13, 13, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 13, 13, 12, 13, 12, 13, 14, 15, 16,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 13, 13, 13, 13, 13, 13, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 15, 15, 14, 15, 14, 15, 14, 15, 16,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 17, 17, 16, 17, 16, 17, 16, 17, 16,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 17, 17, 17, 17, 17, 17, 17, 17, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 18, 18, 18, 18, 18, 18, 18, 18, 18,
						18, 18, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 1, 1, 0, 0, 1, 1
					}
				},
				{
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 17, 17, 17, 17, 17, 17, 17, 17, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 18, 18, 18, 18, 18, 18, 18, 18, 18,
						18, 18, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 1, 1, 0, 0, 1, 1
					}
				},
				{
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 1, 1, 0, 0, 1, 1
					}
				},
				{
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 11, 9, 11, 11, 13, 13, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 9, 9, 11, 11, 13, 13, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 11, 11, 10, 11, 12, 13, 14, 15, 16,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 11, 11, 11, 11, 13, 13, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 13, 13, 12, 13, 12, 13, 14, 15, 16,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 13, 13, 13, 13, 13, 13, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 15, 15, 14, 15, 14, 15, 14, 15, 16,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 15, 15, 16, 15, 16, 15, 16, 15, 16,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 1, 1, 0, 0, 1, 1
					}
				},
				{
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 11, 11, 11, 11, 11, 11, 11, 11, 11,
						11, 11, 11, 11, 11, 11, 1
					},
					{
						0, 9, 9, 9, 9, 9, 9, 9, 9, 9,
						9, 9, 9, 9, 9, 9, 1
					},
					{
						0, 10, 10, 10, 10, 10, 10, 10, 10, 10,
						10, 10, 10, 10, 10, 10, 1
					},
					{
						0, 11, 11, 11, 11, 11, 11, 11, 11, 11,
						11, 11, 11, 11, 11, 11, 1
					},
					{
						0, 12, 12, 12, 12, 12, 12, 12, 12, 12,
						12, 12, 12, 12, 12, 12, 1
					},
					{
						0, 13, 13, 13, 13, 13, 13, 13, 13, 13,
						13, 13, 13, 13, 13, 13, 1
					},
					{
						0, 14, 14, 14, 14, 14, 14, 14, 14, 14,
						14, 14, 14, 14, 14, 14, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 15, 15, 15, 1
					},
					{
						0, 16, 16, 16, 16, 16, 16, 16, 16, 16,
						16, 16, 16, 16, 16, 16, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 15, 15, 15, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 15, 15, 15, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 15, 15, 15, 1
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 15, 15, 15, 1
					},
					{
						0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 1, 1, 1, 1, 1, 1
					}
				},
				{
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 7, 7, 7, 7, 7, 7, 7, 7, 7,
						7, 7, 7, 0, 0, 7, 1
					},
					{
						0, 7, 7, 7, 7, 7, 7, 7, 7, 7,
						7, 7, 7, 0, 0, 7, 1
					},
					{
						0, 7, 7, 7, 7, 7, 7, 7, 7, 7,
						7, 7, 7, 0, 0, 7, 1
					},
					{
						0, 7, 7, 7, 7, 7, 7, 7, 7, 7,
						7, 7, 7, 0, 0, 7, 1
					},
					{
						0, 7, 7, 7, 7, 7, 7, 7, 7, 7,
						7, 7, 7, 0, 0, 7, 1
					},
					{
						0, 7, 7, 7, 7, 7, 7, 7, 7, 7,
						7, 7, 7, 0, 0, 7, 1
					},
					{
						0, 7, 7, 7, 7, 7, 7, 7, 7, 7,
						7, 7, 7, 0, 0, 7, 1
					},
					{
						0, 7, 7, 7, 7, 7, 7, 7, 7, 7,
						7, 7, 7, 0, 0, 7, 1
					},
					{
						0, 7, 7, 7, 7, 7, 7, 7, 7, 7,
						7, 7, 7, 0, 0, 7, 1
					},
					{
						0, 7, 7, 7, 7, 7, 7, 7, 7, 7,
						7, 7, 7, 0, 0, 7, 1
					},
					{
						0, 7, 7, 7, 7, 7, 7, 7, 7, 7,
						7, 7, 7, 0, 0, 7, 1
					},
					{
						0, 7, 7, 7, 7, 7, 7, 7, 7, 7,
						7, 7, 7, 0, 0, 7, 1
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 7, 7, 7, 7, 7, 7, 7, 7, 7,
						7, 7, 7, 0, 0, 7, 1
					},
					{
						0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 1, 1, 0, 0, 1, 1
					}
				},
				{
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 7, 9, 11, 11, 13, 13, 15, 15, 15,
						15, 15, 15, 0, 0, 7, 1
					},
					{
						0, 9, 9, 11, 11, 13, 13, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 11, 11, 10, 11, 12, 13, 14, 15, 16,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 11, 11, 11, 11, 13, 13, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 13, 13, 12, 13, 12, 13, 14, 15, 16,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 13, 13, 13, 13, 13, 13, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 15, 15, 14, 15, 14, 15, 14, 15, 16,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 15, 15, 16, 15, 16, 15, 16, 15, 16,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 7, 15, 15, 15, 15, 15, 15, 15, 15,
						15, 15, 15, 0, 0, 15, 1
					},
					{
						0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 1, 1, 0, 0, 1, 1
					}
				},
				{
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 7, 9, 11, 11, 13, 13, 15, 15, 17,
						17, 18, 19, 0, 0, 7, 1
					},
					{
						0, 9, 9, 11, 11, 13, 13, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 11, 11, 10, 11, 12, 13, 14, 15, 16,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 11, 11, 11, 11, 13, 13, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 13, 13, 12, 13, 12, 13, 14, 15, 16,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 13, 13, 13, 13, 13, 13, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 15, 15, 14, 15, 14, 15, 14, 15, 16,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 15, 15, 15, 15, 15, 15, 15, 15, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 17, 17, 16, 17, 16, 17, 16, 17, 16,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 17, 17, 17, 17, 17, 17, 17, 17, 17,
						17, 18, 19, 0, 0, 19, 1
					},
					{
						0, 18, 18, 18, 18, 18, 18, 18, 18, 18,
						18, 18, 19, 0, 0, 19, 1
					},
					{
						0, 19, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 0, 0, 19, 1
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 33, 0, 33, 1
					},
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 8, 20, 1
					},
					{
						0, 7, 19, 19, 19, 19, 19, 19, 19, 19,
						19, 19, 19, 33, 20, 20, 1
					},
					{
						0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 1, 1, 1, 1, 1, 1
					}
				},
				{
					{
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 20, 20, 20, 20, 20, 20, 20, 20, 20,
						20, 20, 20, 20, 20, 20, 1
					},
					{
						0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
						1, 1, 1, 1, 1, 1, 1
					}
				}
			};
		}

		internal static SpecialType LookupInOperatorTables(SyntaxKind opcode, SpecialType left, SpecialType right)
		{
			TableKind tableKind;
			switch (opcode)
			{
			case SyntaxKind.AddExpression:
				tableKind = TableKind.Addition;
				break;
			case SyntaxKind.SubtractExpression:
			case SyntaxKind.MultiplyExpression:
			case SyntaxKind.ModuloExpression:
				tableKind = TableKind.SubtractionMultiplicationModulo;
				break;
			case SyntaxKind.DivideExpression:
				tableKind = TableKind.Division;
				break;
			case SyntaxKind.IntegerDivideExpression:
				tableKind = TableKind.IntegerDivision;
				break;
			case SyntaxKind.ExponentiateExpression:
				tableKind = TableKind.Power;
				break;
			case SyntaxKind.LeftShiftExpression:
			case SyntaxKind.RightShiftExpression:
				tableKind = TableKind.Shift;
				break;
			case SyntaxKind.OrElseExpression:
			case SyntaxKind.AndAlsoExpression:
				tableKind = TableKind.Logical;
				break;
			case SyntaxKind.ConcatenateExpression:
			case SyntaxKind.LikeExpression:
				tableKind = TableKind.ConcatenationLike;
				break;
			case SyntaxKind.EqualsExpression:
			case SyntaxKind.NotEqualsExpression:
			case SyntaxKind.LessThanExpression:
			case SyntaxKind.LessThanOrEqualExpression:
			case SyntaxKind.GreaterThanOrEqualExpression:
			case SyntaxKind.GreaterThanExpression:
				tableKind = TableKind.Relational;
				break;
			case SyntaxKind.OrExpression:
			case SyntaxKind.ExclusiveOrExpression:
			case SyntaxKind.AndExpression:
				tableKind = TableKind.Bitwise;
				break;
			default:
				throw ExceptionUtilities.UnexpectedValue(opcode);
			}
			return (SpecialType)s_table[(int)tableKind, TypeCodeToIndex(left), TypeCodeToIndex(right)];
		}
	}
}
